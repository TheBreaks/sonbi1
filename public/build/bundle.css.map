{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Player.svelte",
    "..\\..\\Visualizer.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Player from './Player.svelte';\n\timport '@fortawesome/fontawesome-free/js/fontawesome.min.js';\n\timport '@fortawesome/fontawesome-free/js/solid.min.js';\n</script>\n<main>\n\t<Player/>\n</main>\n<style>\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: 960px;\n\t\t\tmargin: 0 auto;\n\t\t}\n\t}\n</style>",
    "<script>\r\n    import { onMount } from 'svelte';\r\n    import Visualizer from './Visualizer.svelte';\r\n\r\n    let audio;\r\n    let time = 0;\r\n    let duration;\r\n    let paused = true;\r\n    let volume = 0.5;\r\n    let volume_save = volume;\r\n    let mute = false;\r\n    let loop = false;\r\n    let shuffle = false;\r\n    let viz = false;\r\n\r\n    let folder = \"sounds\";\r\n    let sounds = [];\r\n\r\n    let current_sound_index = 0;\r\n    $: current_sound_src = (sounds != null && sounds[current_sound_index] != null) \r\n        ? folder + \"/\" + sounds[current_sound_index] \r\n        : \"\";\r\n\r\n    let touch_screenX;\r\n    let touch_screenY;\r\n    let touch_clientX;\r\n    let touch_clientY;\r\n    let touch_target;\r\n\r\n    onMount(() => {\r\n        fetch('playlist.json')\r\n        .then((resp) => resp.json())\r\n        .then(function(response){\r\n            sounds = response.songs;\r\n            if(sounds[current_sound_index] != null){\r\n                audio = document.getElementById('audio');\r\n                audio.src = folder + \"/\" + sounds[current_sound_index];\r\n            }\r\n        });\r\n\r\n        // const canvas = document.getElementById('viz');\r\n        // const ctx = canvas.getContext('2d');\r\n        // ctx.fillStyle = 'orange';\r\n        // ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    });\r\n\r\n    function toggle_play_pause(){\r\n        paused = !paused;\r\n    }\r\n\r\n    function stop(){\r\n        audio.pause();\r\n        audio.currentTime = 0;\r\n    }\r\n\r\n    function previous_sound(){\r\n        current_sound_index = (current_sound_index === 0 ) ? sounds.length - 1 : current_sound_index - 1 ;\r\n        play_sound(current_sound_index);\r\n        scroll_to_sound();\r\n    }\r\n\r\n    function next_sound(){\r\n        if(loop === false) current_sound_index = (current_sound_index + 1) % sounds.length;\r\n        if(shuffle === true) current_sound_index = Math.floor(Math.random() * sounds.length);\r\n        play_sound(current_sound_index);\r\n        scroll_to_sound();\r\n    }\r\n\r\n    function toggle_shuffle(){\r\n        shuffle = !shuffle;\r\n    }\r\n\r\n    function toggle_loop(){\r\n        loop = !loop;\r\n    }\r\n\r\n    function volume_mute(){\r\n        if(mute === false){\r\n            volume_save = volume;\r\n            volume = 0;\r\n        }else{\r\n            volume = volume_save;\r\n        }\r\n        mute = !mute;\r\n    }\r\n\r\n    function toggle_viz(){\r\n        viz = ! viz;\r\n    }\r\n\r\n    function volume_up(){\r\n        if(volume + 0.1 <= 1) volume += 0.1;\r\n    }\r\n\r\n    function volume_down(){\r\n        if(volume - 0.1 >= 0) volume -= 0.1;\r\n    }\r\n\r\n    function format(seconds) {\r\n\t\tif (isNaN(seconds)) return '...';\r\n\t\tconst minutes = Math.floor(seconds / 60);\r\n\t\tseconds = Math.floor(seconds % 60);\r\n\t\tif (seconds < 10) seconds = '0' + seconds;\r\n\t\treturn `${minutes}:${seconds}`;\r\n    }\r\n    \r\n    function handleMousemove(e) {\r\n\t\tif (!(e.buttons & 1)) return; // mouse not down\r\n        if (!duration) return; // video not loaded yet\r\n\t\tconst { left, right } = this.getBoundingClientRect();\r\n\t\ttime = duration * (e.clientX - left) / (right - left);\r\n    }\r\n\r\n    function handleTouchmove(e) {\r\n        if(e.changedTouches.length > 0){\r\n            let theTouch = e.changedTouches[0];\r\n            touch_screenX = theTouch.screenX;\r\n            touch_screenY = theTouch.screenY;\r\n            touch_clientX = theTouch.clientX;\r\n            touch_clientY = theTouch.clientY;\r\n            touch_target = theTouch.target;\r\n        }\r\n        let mouseEv;\r\n        switch(e.type)\r\n        {\r\n            case \"touchstart\": mouseEv=\"mousedown\"; break;  \r\n            case \"touchend\":   mouseEv=\"mouseup\"; break;\r\n            case \"touchmove\":  mouseEv=\"mousemove\"; break;\r\n            default: return;\r\n        }\r\n        let mouseEvent = new MouseEvent(mouseEv,{ \r\n            screenX: touch_screenX, \r\n            screenY: touch_screenY,\r\n            clientX: touch_clientX,\r\n            clientY: touch_clientY,\r\n            button: 0,\r\n            buttons: 1\r\n        });\r\n        touch_target.dispatchEvent(mouseEvent);\r\n        e.preventDefault();\r\n\t}\r\n\r\n    function play_sound(sound_index){\r\n        current_sound_index = sound_index;\r\n        audio.src = folder + \"/\" + sounds[current_sound_index];\r\n        audio.play();\r\n    }\r\n\r\n    function scroll_to_sound(){\r\n        let elt = document.getElementById(\"item_\"+current_sound_index);\r\n        elt.scrollIntoView({behavior: \"smooth\"});\r\n    }\r\n</script>\r\n\r\n<div class=\"container\">\r\n    <div class=\"player bg-dark\"> \r\n        <audio id=\"audio\"\r\n            on:ended={next_sound}\r\n            bind:paused \r\n            bind:volume \r\n            bind:duration\r\n            bind:currentTime={time}\r\n            ></audio>\r\n        {#if viz === true}\r\n        <Visualizer/>\r\n        {/if}\r\n        <div class=\"info text-light\">\r\n            <span class=\"time\"><strong>{format(time)} / {format(duration)}</strong> | </span>{current_sound_src}\r\n        </div>\r\n        <div class=\"progress\">\r\n            <progress class=\"bg-light\"\r\n                value=\"{(time / duration) || 0}\"\r\n                on:mousemove={handleMousemove}\r\n                on:touchstart={handleTouchmove}\r\n                on:touchmove={handleTouchmove} \r\n                on:touchend={handleTouchmove}/>\r\n        </div>\r\n        <div class=\"controls\">\r\n            <button on:click={previous_sound}><i class='fas fa-step-backward'></i></button> \r\n            <button on:click={toggle_play_pause}>\r\n            {#if paused === true}\r\n                <span><i class='fas fa-play'></i></span>\r\n            {:else}\r\n                <span><i class='fas fa-pause'></i></span>\r\n            {/if}\r\n            </button> \r\n            <button on:click={stop}><i class='fas fa-stop'></i></button> \r\n            <button on:click={next_sound}><i class='fas fa-step-forward'></i></button> \r\n            <button class:bg-primary={shuffle} on:click={toggle_shuffle}><i class='fas fa-random'></i></button> \r\n            <button class:bg-primary={loop} on:click={toggle_loop}><i class='fas fa-redo'></i></button> \r\n            <button class:bg-primary={mute} on:click={volume_mute}><i class='fas fa-volume-mute'></i></button> \r\n            <button class:bg-primary={viz} on:click={toggle_viz}><i class='fas fa-signal'></i></button> \r\n            <!-- <button on:click={volume_down}><i class='fas fa-volume-down'></i></button> \r\n            <button on:click={volume_up}><i class='fas fa-volume-up'></i></button> -->\r\n        </div>\r\n        \r\n    </div>  \r\n    <div class=\"playlist bg-dark text-light\">\r\n        <div class=\"playlist_items_wrapper\">\r\n            <div class=\"playlist_items bg-light text-dark\">\r\n                {#each sounds as sound, i }\r\n                    <div class=\"playlist_item\" id=\"item_{i}\" class:selected={ current_sound_index === i} on:click={() => play_sound(i)}>{i+1}. {sound}</div>\r\n                {/each}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<style>\r\n    .text-light{ color: white; }\r\n    .text-dark{ color: #2b2b2b; }\r\n    .bg-primary, .selected{ background-color: #ff9900; }\r\n    .bg-dark{ background-color: #2b2b2b; }\r\n    .bg-light{ background-color: white; }\r\n\r\n    button{\r\n        width: 2.3em;\r\n        height: 2.3em;\r\n        cursor: pointer;\r\n        border: #2b2b2b 1px solid;\r\n        border-radius: 0;\r\n    }\r\n    button:focus{\r\n        outline:none;\r\n        border: #ff9900 1px solid;\r\n    }\r\n    button::-moz-focus-inner {\r\n        border: 0;\r\n        padding: 1em;\r\n    }\r\n    .container{\r\n        display: grid;\r\n        height: 100vh;\r\n        padding: 0.5em 1em 1em 1em;\r\n        box-sizing: border-box;\r\n        grid-template-rows: [row1-start] auto [row1-end] 1fr [last-line];\r\n    }\r\n    /* ---- Player ---- */\r\n\t.player{\r\n        padding: 0.5em 1em 0 1em ;\r\n        /* Required for text-overflow to do anything */\r\n        min-width: 0;\r\n    }\r\n    .info{\r\n        padding-top: 0.5em;\r\n        padding-bottom : 1em;\r\n        text-overflow: ellipsis;\r\n        /* Required for text-overflow to do anything */\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n    }\r\n    .progress{ padding-bottom : 1em; }\r\n    progress {\r\n        border: 0;\r\n\t\tdisplay: block;\r\n\t\twidth: 100%;\r\n\t\theight: 1em;\r\n\t\t-webkit-appearance: none;\r\n        appearance: none;\r\n    }\r\n\tprogress::-webkit-progress-bar { background-color: white; }\r\n    progress::-moz-progress-bar { background-color: #ff9900; }\r\n\tprogress::-webkit-progress-value { background-color: #ff9900; }\r\n\r\n   \r\n    /* ---- Playlist ---- */\r\n    .playlist{\r\n        overflow: hidden;\r\n        padding: 1em;\r\n    }\r\n    .playlist_items_wrapper{\r\n        max-height: 100%;\r\n        overflow-y: scroll;\r\n        scrollbar-width: none;\r\n    }\r\n    .playlist_items_wrapper::-webkit-scrollbar{ display: none; }\r\n    .playlist_items{\r\n        max-height: 100%;\r\n        min-width: 0;\r\n    }\r\n    .playlist_item{\r\n        cursor: pointer;\r\n        padding: 0.5em;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n    }\r\n\r\n    @media (max-width: 640px) {\r\n\t\t.container {\r\n\t\t\tpadding: 0;\r\n\t\t}\r\n\t}\r\n</style>",
    "<script>\r\n    import { onMount } from 'svelte';\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\r\n    const bg_color = '#2b2b2b';\r\n    const stroke_color = '#ff9900';\r\n    let viz_index = 0;\r\n    let canvas;\r\n    let ctx;\r\n    let w;\r\n    let h;\r\n    let audioCtx;\r\n    let source;\r\n    let analyser;\r\n    let distortion;\r\n\r\n    onMount(() => {\r\n        canvas = document.getElementById('viz');\r\n        ctx = canvas.getContext('2d');\r\n        w = ctx.canvas.width;\r\n        h = ctx.canvas.height;\r\n        audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n        audioCtx.resume();\r\n        source = audioCtx.createMediaElementSource(audio);\r\n        analyser = audioCtx.createAnalyser();\r\n        distortion = audioCtx.createWaveShaper();\r\n        source.connect(analyser);\r\n        analyser.connect(distortion);\r\n        distortion.connect(audioCtx.destination);\r\n        draw_viz();\r\n    });\r\n\r\n    function draw_viz(){\r\n        if(viz_index === 0){\r\n            draw_waveform();\r\n            viz_index += 1;\r\n        }else{\r\n            draw_frequencybars();\r\n            viz_index = 0;\r\n        }\r\n    }\r\n\r\n    function draw_waveform(){\r\n        analyser.fftSize = 2048;\r\n        let bufferLength = analyser.frequencyBinCount;\r\n        let dataArray = new Uint8Array(bufferLength);\r\n        analyser.getByteTimeDomainData(dataArray);\r\n        ctx.clearRect(0, 0, w, h);\r\n\r\n        function draw() {\r\n            let drawVisual = requestAnimationFrame(draw);\r\n            analyser.getByteTimeDomainData(dataArray);\r\n            ctx.fillStyle = bg_color;\r\n            ctx.fillRect(0, 0, w, h);\r\n            ctx.lineWidth = 3;\r\n            ctx.strokeStyle = stroke_color;\r\n            ctx.beginPath();\r\n            let sliceWidth = w * 1.0 / bufferLength;\r\n            let x = 0;\r\n            for(let i = 0; i < bufferLength; i++) {\r\n                let v = dataArray[i] / 128.0 ;\r\n                let y = v * h / 2;\r\n                if(i === 0)\r\n                    ctx.moveTo(x, y);\r\n                else\r\n                    ctx.lineTo(x, y);\r\n                x += sliceWidth;\r\n            }\r\n            ctx.lineTo(w, h / 2);\r\n            ctx.stroke();\r\n        }\r\n        draw();\r\n    }\r\n\r\n    function draw_frequencybars(){\r\n        analyser.fftSize = 256;\r\n        let bufferLength = analyser.frequencyBinCount;\r\n        let dataArray = new Uint8Array(bufferLength);\r\n        ctx.clearRect(0, 0, w, h);\r\n\r\n        function draw() {\r\n            let drawVisual = requestAnimationFrame(draw);\r\n            analyser.getByteFrequencyData(dataArray);\r\n            ctx.fillStyle = bg_color;\r\n            ctx.fillRect(0, 0, w, h);\r\n            let barWidth = (w / bufferLength) * 2.5;\r\n            let barHeight;\r\n            let x = 0;\r\n            for(var i = 0; i < bufferLength; i++) {\r\n                barHeight = dataArray[i] / 2;\r\n                ctx.fillStyle = 'rgb(' + (barHeight + 100) + ',100,00)';\r\n                ctx.fillRect(x,h - barHeight / 2,barWidth,barHeight);\r\n                x += barWidth + 1;\r\n            }\r\n        }\r\n        draw();\r\n    }\r\n</script>\r\n    <canvas id=\"viz\" on:click={draw_viz}></canvas>\r\n<style>\r\n    #viz{\r\n        margin-top: 0.5em;\r\n        margin-bottom: 0.5em;\r\n        width: 100%;\r\n        height: 2em;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}